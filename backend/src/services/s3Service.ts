import AWS from 'aws-sdk';

class S3Service {
  private s3: AWS.S3;
  private bucket: string;

  constructor() {
    this.bucket = process.env.S3_BUCKET || 'f7eead03-crmfiles';
    
    this.s3 = new AWS.S3({
      endpoint: process.env.S3_ENDPOINT || 'https://s3.twcstorage.ru',
      accessKeyId: process.env.S3_ACCESS_KEY || 'G0Q8KYB00336TBRJ7CLF',
      secretAccessKey: process.env.S3_SECRET_KEY || '1XafQAT9DKRWs4YImAU2XfkX7VAb1LlXDiH2Ks6Y',
      region: process.env.S3_REGION || 'ru-1',
      s3ForcePathStyle: true, // –ù—É–∂–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å S3-–ø–æ–¥–æ–±–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
      signatureVersion: 'v4'
    });

    console.log('ü™£ S3 Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
      endpoint: this.s3.config.endpoint,
      bucket: this.bucket,
      region: this.s3.config.region,
      hasAccessKey: !!process.env.S3_ACCESS_KEY
    });
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∏ –≤ S3
   */
  async uploadRecording(filename: string, content: Buffer): Promise<string> {
    try {
      const key = `callcentre/recording_path/${filename}`;
      
      console.log(`‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3: ${key}`);
      
      const result = await this.s3.upload({
        Bucket: this.bucket,
        Key: key,
        Body: content,
        ContentType: 'audio/mpeg',
        ACL: 'private'
      }).promise();

      console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: ${result.Location}`);
      return key; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
   */
  async getRecordingUrl(key: string): Promise<string> {
    try {
      const url = this.s3.getSignedUrl('getObject', {
        Bucket: this.bucket,
        Key: key,
        Expires: 3600 // URL –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å
      });

      console.log(`üîó –°–æ–∑–¥–∞–Ω –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL –¥–ª—è: ${key}`);
      return url;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL:', error);
      throw error;
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ S3
   */
  async downloadRecording(key: string): Promise<Buffer> {
    try {
      console.log(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ S3: ${key}`);
      
      const result = await this.s3.getObject({
        Bucket: this.bucket,
        Key: key
      }).promise();

      return result.Body as Buffer;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ S3:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ S3
   */
  async fileExists(key: string): Promise<boolean> {
    try {
      await this.s3.headObject({
        Bucket: this.bucket,
        Key: key
      }).promise();
      return true;
    } catch (error: any) {
      if (error.code === 'NotFound') {
        return false;
      }
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ S3
   */
  async deleteRecording(key: string): Promise<void> {
    try {
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3: ${key}`);
      
      await this.s3.deleteObject({
        Bucket: this.bucket,
        Key: key
      }).promise();

      console.log(`‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ S3: ${key}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ S3
   */
  async uploadPassport(filename: string, content: Buffer): Promise<string> {
    try {
      const key = `callcentre/operator_passport/${filename}`;
      
      console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ S3: ${key}`);
      
      const result = await this.s3.upload({
        Bucket: this.bucket,
        Key: key,
        Body: content,
        ContentType: 'image/jpeg',
        ACL: 'private'
      }).promise();

      console.log(`‚úÖ –§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: ${result.Location}`);
      return key;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ S3:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ S3
   */
  async uploadContract(filename: string, content: Buffer): Promise<string> {
    try {
      const key = `callcentre/operator_contract/${filename}`;
      
      console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ S3: ${key}`);
      
      const result = await this.s3.upload({
        Bucket: this.bucket,
        Key: key,
        Body: content,
        ContentType: 'image/jpeg',
        ACL: 'private'
      }).promise();

      console.log(`‚úÖ –§–æ—Ç–æ –¥–æ–≥–æ–≤–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: ${result.Location}`);
      return key;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ S3:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞/–¥–æ–≥–æ–≤–æ—Ä–∞
   */
  async getEmployeeFileUrl(key: string): Promise<string> {
    try {
      console.log(`üîó –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL –¥–ª—è —Ñ–∞–π–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${key}`);
      
      const url = this.s3.getSignedUrl('getObject', {
        Bucket: this.bucket,
        Key: key,
        Expires: 3600 // URL –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å
      });

      return url;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL –¥–ª—è —Ñ–∞–π–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
      throw error;
    }
  }
}

export default new S3Service();
