import Imap from 'imap';
// @ts-ignore
import { simpleParser } from 'mailparser';
import fs from 'fs';
import path from 'path';
import { PrismaClient } from '@prisma/client';
import s3Service from './s3Service';

const prisma = new PrismaClient();

interface EmailConfig {
  host: string;
  port: number;
  secure: boolean;
  user: string;
  password: string;
  searchCriteria: string[];
  attachmentTypes: string[];
}

interface RecordingEmail {
  callId?: string;
  mangoCallId?: string;
  attachments: Array<{
    filename: string;
    content: Buffer;
    contentType: string;
  }>;
  subject: string;
  date: Date;
}

class EmailRecordingService {
  private config: EmailConfig | null = null;
  private processedEmails: Set<string> = new Set();

  constructor() {
    this.loadConfig();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
   */
  private async loadConfig(): Promise<void> {
    try {
      const settings = await prisma.emailSettings.findFirst({
        orderBy: { createdAt: 'desc' }
      });

      console.log('üìß –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—á—Ç—ã:', {
        found: !!settings,
        enabled: settings?.enabled,
        host: settings?.host
      });

      if (settings) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î');
        this.config = {
          host: settings.host,
          port: settings.port,
          secure: settings.secure,
          user: settings.user,
          password: settings.password,
          searchCriteria: [settings.mangoEmail],
          attachmentTypes: ['.mp3', '.wav', '.m4a', '.aac']
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (!settings.enabled) {
          console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
          return; // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        }
      } else {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env');
        // Fallback –Ω–∞ .env –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î
        this.config = {
          host: process.env.EMAIL_HOST || 'imap.gmail.com',
          port: parseInt(process.env.EMAIL_PORT || '993'),
          secure: process.env.EMAIL_SECURE === 'true',
          user: process.env.EMAIL_USER || '',
          password: process.env.EMAIL_PASSWORD || '',
          searchCriteria: [process.env.MANGO_EMAIL || 'mango@example.com'],
          attachmentTypes: ['.mp3', '.wav', '.m4a', '.aac']
        };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—á—Ç—ã:', error);
      // Fallback –Ω–∞ .env –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.config = {
        host: process.env.EMAIL_HOST || 'imap.gmail.com',
        port: parseInt(process.env.EMAIL_PORT || '993'),
        secure: process.env.EMAIL_SECURE === 'true',
        user: process.env.EMAIL_USER || '',
        password: process.env.EMAIL_PASSWORD || '',
        searchCriteria: [process.env.MANGO_EMAIL || 'mango@example.com'],
        attachmentTypes: ['.mp3', '.wav', '.m4a', '.aac']
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á—Ç—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤
   */
  async checkForNewRecordings(): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤...');
    
    try {
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await this.loadConfig();
      
      if (!this.config) {
        console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—á—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      const settings = await prisma.emailSettings.findFirst({
        orderBy: { createdAt: 'desc' }
      });
      
      if (settings && !settings.enabled) {
        console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        return;
      }

      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ:', {
        host: this.config.host,
        port: this.config.port,
        secure: this.config.secure,
        user: this.config.user,
        passwordLength: this.config.password?.length || 0,
        searchCriteria: this.config.searchCriteria
      });

      const imapConfig = {
        host: this.config.host,
        port: this.config.port,
        tls: this.config.secure,
        user: this.config.user,
        password: this.config.password,
        connTimeout: 120000, // 2 –º–∏–Ω—É—Ç—ã
        authTimeout: 120000, // 2 –º–∏–Ω—É—Ç—ã
        keepalive: {
          interval: 10000,
          idleInterval: 300000,
          forceNoop: true
        },
        tlsOptions: {
          rejectUnauthorized: false, // –î–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
          servername: this.config.host
        }
      };

      console.log('üîß IMAP Config:', {
        host: imapConfig.host,
        port: imapConfig.port,
        tls: imapConfig.tls,
        user: imapConfig.user,
        passwordSet: !!imapConfig.password,
        connTimeout: imapConfig.connTimeout,
        authTimeout: imapConfig.authTimeout
      });

      const imap = new Imap(imapConfig);
      
      await new Promise<void>((resolve, reject) => {
        imap.once('ready', () => {
          console.log('üìß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
          this.fetchEmails(imap).then(resolve).catch(reject);
        });

        imap.once('error', (err: Error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ:', {
            message: err.message,
            source: (err as any).source,
            code: (err as any).code,
            host: this.config?.host,
            port: this.config?.port,
            secure: this.config?.secure
          });
          reject(err);
        });

        imap.connect();
      });

      imap.end();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∏—Å—å–º–∞ –∏–∑ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
   */
  private async fetchEmails(imap: Imap): Promise<void> {
    return new Promise((resolve, reject) => {
      imap.openBox('INBOX', true, (err, box) => { // true = read-write —Ä–µ–∂–∏–º
        if (err) {
          reject(err);
          return;
        }

        // –ò—â–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞ –æ—Ç Mango –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        const fromEmail = this.config?.searchCriteria?.[0] || 'mango@example.com';
        const since = new Date();
        since.setDate(since.getDate() - 7);
        const searchCriteria = [
          ['SINCE', since],
          ['FROM', fromEmail]
        ];

        console.log('üîç –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º:', {
          criteria: searchCriteria,
          fromEmail: fromEmail
        });

        imap.search(searchCriteria, (err, results) => {
          if (err) {
            reject(err);
            return;
          }

          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', {
            found: results?.length || 0,
            results: results
          });

          if (!results || results.length === 0) {
            console.log('üì≠ –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            resolve();
            return;
          }

          console.log(`üì¨ –ù–∞–π–¥–µ–Ω–æ ${results.length} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º —Å –∑–∞–ø–∏—Å—è–º–∏`);

          const fetch = imap.fetch(results, { bodies: '', struct: true });
          
          fetch.on('message', (msg) => {
            this.processEmail(msg);
          });

          fetch.once('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º:', err);
            reject(err);
          });

          fetch.once('end', () => {
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            resolve();
          });
        });
      });
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
   */
  private async processEmail(msg: any): Promise<void> {
    let buffer = '';

    msg.on('body', (stream: any) => {
      stream.on('data', (chunk: Buffer) => {
        buffer += chunk.toString('utf8');
      });
    });

    msg.once('end', async () => {
      try {
        const parsed = await simpleParser(buffer);
        await this.handleRecordingEmail(parsed);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–∏—Å—å–º–∞:', error);
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∏—Å—å–º–æ —Å –∑–∞–ø–∏—Å—å—é –∑–≤–æ–Ω–∫–∞
   */
  private async handleRecordingEmail(email: any): Promise<void> {
    const emailId = email.messageId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ –ø–∏—Å—å–º–æ
    if (this.processedEmails.has(emailId)) {
      return;
    }

    console.log(`üìß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞: ${email.subject}`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–∞
    const callData = this.extractCallData(email);
    
    if (!callData) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –∏–∑ –ø–∏—Å—å–º–∞');
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞—É–¥–∏–æ –≤–ª–æ–∂–µ–Ω–∏—è
    const audioAttachments = email.attachments?.filter((att: any) => {
      const ext = path.extname(att.filename || '').toLowerCase();
      return this.config?.attachmentTypes.includes(ext) || false;
    }) || [];

    if (audioAttachments.length === 0) {
      console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –≤–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏
    for (const attachment of audioAttachments) {
      await this.saveRecording(callData, attachment, email);
    }

    // –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
    this.processedEmails.add(emailId);
    
    console.log(`‚úÖ –ó–∞–ø–∏—Å—å –¥–ª—è –∑–≤–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–∞ –∏–∑ –ø–∏—Å—å–º–∞
   */
  private extractCallData(email: any): { date: string; time: string; phones: string[] } | null {
    // –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ä–º–∞—Ç: 2025-09-21__11-45-54__79093330057__79923298779.mp3)
    if (email.attachments && email.attachments.length > 0) {
      for (const attachment of email.attachments) {
        const filename = attachment.filename || '';
        console.log('üîç –ê–Ω–∞–ª–∏–∑ –≤–ª–æ–∂–µ–Ω–∏—è:', filename);
        
        // –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: 2025-09-21__11-45-54__79093330057__79923298779.mp3
        let match = filename.match(/(\d{4}-\d{2}-\d{2})__(\d{2}-\d{2}-\d{2})__(\d{11})__(\d{11})/);
        if (match) {
          const [, date, time, phone1, phone2] = match;
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç 1):', { date, time, phones: [phone1, phone2] });
          return {
            date: date, // 2025-09-21
            time: time.replace(/-/g, ':'), // 11:45:54
            phones: [phone1, phone2]
          };
        }

        // –ü–∞—Ä—Å–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 2023.12.23__18-43-12__74951234567__74951234567
        match = filename.match(/(\d{4})\.(\d{2})\.(\d{2})__(\d{2}-\d{2}-\d{2})__(\d{11})__(\d{11})/);
        if (match) {
          const [, year, month, day, time, phone1, phone2] = match;
          const date = `${year}-${month}-${day}`; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç 2023-12-23
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç 2):', { date, time, phones: [phone1, phone2] });
          return {
            date: date,
            time: time.replace(/-/g, ':'), // 18:43:12
            phones: [phone1, phone2]
          };
        }
      }
    }

    return null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å
   */
  private async saveRecording(callData: { date: string; time: string; phones: string[] }, attachment: any, email: any): Promise<void> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const filename = attachment.filename || 'recording.mp3';

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
      const s3Key = await s3Service.uploadRecording(filename, attachment.content);
      console.log(`‚òÅÔ∏è –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: ${s3Key}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î (—Å–æ—Ö—Ä–∞–Ω—è–µ–º S3 –∫–ª—é—á –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏)
      await this.updateCallWithRecording(callData, s3Key, email);

      console.log(`üíæ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ S3: ${filename}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ S3:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –≤ –ë–î
   */
  private async updateCallWithRecording(callData: { date: string; time: string; phones: string[] }, s3Key: string, email: any): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–ª—é—Å-–º–∏–Ω—É—Å 2 –º–∏–Ω—É—Ç—ã)
      const callTime = new Date(`${callData.date}T${callData.time}`);
      const timeStart = new Date(callTime.getTime() - 2 * 60 * 1000); // -2 –º–∏–Ω—É—Ç—ã
      const timeEnd = new Date(callTime.getTime() + 2 * 60 * 1000); // +2 –º–∏–Ω—É—Ç—ã

      console.log('üîç –ü–æ–∏—Å–∫ –∑–≤–æ–Ω–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º:', {
        date: callData.date,
        time: callData.time,
        phones: callData.phones,
        timeRange: { start: timeStart, end: timeEnd }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫ –¥—Ä—É–≥–æ–º—É –∑–≤–æ–Ω–∫—É
      const existingCallWithSameFile = await prisma.call.findFirst({
        where: {
          recordingPath: s3Key
        }
      });

      if (existingCallWithSameFile) {
        console.log(`‚ö†Ô∏è –§–∞–π–ª –∑–∞–ø–∏—Å–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–≤–æ–Ω–∫—É ID: ${existingCallWithSameFile.id}`);
        return;
      }

      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∑–≤–æ–Ω–∫–∏ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      const existingCallsWithRecordings = await prisma.call.findMany({
        where: {
          AND: [
            {
              createdAt: {
                gte: timeStart,
                lte: timeEnd
              }
            },
            {
              OR: [
                { phoneClient: { in: callData.phones } },
                { phoneAts: { in: callData.phones } }
              ]
            },
            {
              recordingPath: {
                not: null
              }
            }
          ]
        }
      });

      if (existingCallsWithRecordings.length > 0) {
        console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∑–≤–æ–Ω–∫–∏ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏:`, existingCallsWithRecordings.map(c => c.id));
        return;
      }

      // –ò—â–µ–º –∑–≤–æ–Ω–∫–∏ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π
      const callsWithoutRecordings = await prisma.call.findMany({
        where: {
          AND: [
            {
              createdAt: {
                gte: timeStart,
                lte: timeEnd
              }
            },
            {
              OR: [
                { phoneClient: { in: callData.phones } },
                { phoneAts: { in: callData.phones } }
              ]
            },
            {
              recordingPath: null
            }
          ]
        },
        orderBy: {
          createdAt: 'asc' // –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫
        }
      });

      if (callsWithoutRecordings.length === 0) {
        console.log(`‚ö†Ô∏è –ó–≤–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î –ø–æ –¥–∞–Ω–Ω—ã–º:`, callData);
        return;
      }

      if (callsWithoutRecordings.length > 1) {
        console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–æ–≤ (${callsWithoutRecordings.length}) –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏.`);
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:', callsWithoutRecordings.map(c => ({
          id: c.id,
          createdAt: c.createdAt,
          phoneClient: c.phoneClient,
          phoneAts: c.phoneAts,
          timeDiff: Math.abs(c.createdAt.getTime() - callTime.getTime())
        })));
      }

      // –í—ã–±–∏—Ä–∞–µ–º –∑–≤–æ–Ω–æ–∫, –±–ª–∏–∂–∞–π—à–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
      const call = callsWithoutRecordings.reduce((closest, current) => {
        const closestDiff = Math.abs(closest.createdAt.getTime() - callTime.getTime());
        const currentDiff = Math.abs(current.createdAt.getTime() - callTime.getTime());
        return currentDiff < closestDiff ? current : closest;
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞
      await prisma.call.update({
        where: { id: call.id },
        data: {
          recordingPath: s3Key,
          recordingProcessedAt: new Date(),
          recordingEmailSent: true
        }
      });

      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∑–≤–æ–Ω–∫—É ID: ${call.id} (${call.createdAt}), S3 –∫–ª—é—á: ${s3Key}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î:', error);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–≤–æ–Ω–∫–∞–º)
   */
  async cleanupDuplicateRecordings(): Promise<{ success: boolean; message: string; cleanedCount: number }> {
    try {
      console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...');
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º
      const duplicateRecordings = await prisma.call.groupBy({
        by: ['recordingPath'],
        where: {
          recordingPath: {
            not: null
          }
        },
        _count: {
          recordingPath: true
        },
        having: {
          recordingPath: {
            _count: {
              gt: 1
            }
          }
        }
      });

      if (duplicateRecordings.length === 0) {
        return {
          success: true,
          message: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
          cleanedCount: 0
        };
      }

      let cleanedCount = 0;

      for (const duplicate of duplicateRecordings) {
        if (!duplicate.recordingPath) continue;

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–≤–æ–Ω–∫–∏ —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º
        const callsWithSameFile = await prisma.call.findMany({
          where: {
            recordingPath: duplicate.recordingPath
          },
          orderBy: {
            createdAt: 'asc'
          }
        });

        if (callsWithSameFile.length > 1) {
          // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —É —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞
          const keepCall = callsWithSameFile[0];
          const removeCalls = callsWithSameFile.slice(1);

          // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
          for (const call of removeCalls) {
            await prisma.call.update({
              where: { id: call.id },
              data: {
                recordingPath: null,
                recordingProcessedAt: null,
                recordingEmailSent: false
              }
            });
            cleanedCount++;
          }

          console.log(`üßπ –û—á–∏—â–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ ${duplicate.recordingPath}: –æ—Å—Ç–∞–≤–ª–µ–Ω –∑–≤–æ–Ω–æ–∫ ${keepCall.id}, —É–¥–∞–ª–µ–Ω–æ ${removeCalls.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
        }
      }

      return {
        success: true,
        message: `–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${cleanedCount} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`,
        cleanedCount
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ${error}`,
        cleanedCount: 0
      };
    }
  }

  /**
   * –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã (–¥–ª—è API endpoint)
   */
  async manualCheck(): Promise<{ success: boolean; message: string; processedCount: number }> {
    try {
      const initialProcessedCount = this.processedEmails.size;
      await this.checkForNewRecordings();
      const finalProcessedCount = this.processedEmails.size;
      
      return {
        success: true,
        message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        processedCount: finalProcessedCount - initialProcessedCount
      };
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: ${error}`,
        processedCount: 0
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫)
   */
  async reloadConfig(): Promise<void> {
    await this.loadConfig();
  }
}

export default new EmailRecordingService();
