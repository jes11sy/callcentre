import cron from 'node-cron';
import emailRecordingService from './emailRecordingService';

class CronService {
  private emailCheckJob: cron.ScheduledTask | null = null;

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ cron –∑–∞–¥–∞—á–∏
   */
  start(): void {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ cron —Å–µ—Ä–≤–∏—Å–∞...');
    this.startEmailMonitoring();
    console.log('‚úÖ Cron —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ cron –∑–∞–¥–∞—á–∏
   */
  stop(): void {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ cron —Å–µ—Ä–≤–∏—Å–∞...');
    
    if (this.emailCheckJob) {
      this.emailCheckJob.stop();
      this.emailCheckJob = null;
    }
    
    console.log('‚úÖ Cron —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
   */
  private startEmailMonitoring(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.emailCheckJob = cron.schedule('*/5 * * * *', async () => {
      console.log('‚è∞ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...');
      try {
        await emailRecordingService.checkForNewRecordings();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:', error);
      }
    }, {
      scheduled: false, // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      timezone: 'Europe/Moscow'
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    this.emailCheckJob.start();
    
    console.log('üìß –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å cron –∑–∞–¥–∞—á
   */
  getStatus(): { emailMonitoring: boolean } {
    return {
      emailMonitoring: this.emailCheckJob !== null
    };
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
   */
  async triggerEmailCheck(): Promise<{ success: boolean; message: string; processedCount: number }> {
    try {
      console.log('üîç –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã...');
      const result = await emailRecordingService.manualCheck();
      return result;
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: ${error}`,
        processedCount: 0
      };
    }
  }
}

export default new CronService();
