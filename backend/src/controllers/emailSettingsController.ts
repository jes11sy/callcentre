import { Request, Response } from 'express';
import Imap from 'imap';
// @ts-ignore
import { simpleParser } from 'mailparser';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface EmailSettings {
  host: string;
  port: number;
  secure: boolean;
  user: string;
  password: string;
  mangoEmail: string;
  checkInterval: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  enabled: boolean;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã
 */
export const getEmailSettings = async (req: Request, res: Response) => {
  try {
    // –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
    let settings = await prisma.emailSettings.findFirst({
      orderBy: { createdAt: 'desc' }
    });

    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –∏–∑ .env
    if (!settings) {
      settings = await prisma.emailSettings.create({
        data: {
          host: process.env.EMAIL_HOST || 'imap.gmail.com',
          port: parseInt(process.env.EMAIL_PORT || '993'),
          secure: process.env.EMAIL_SECURE === 'true',
          user: process.env.EMAIL_USER || '',
          password: process.env.EMAIL_PASSWORD || '',
          mangoEmail: process.env.MANGO_EMAIL || '',
          checkInterval: parseInt(process.env.EMAIL_CHECK_INTERVAL || '5'),
          enabled: process.env.EMAIL_MONITORING_ENABLED === 'true'
        }
      });
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ
    const responseData = {
      ...settings,
      password: settings.password ? '***' : ''
    };

    res.json({
      success: true,
      data: responseData
    });
  } catch (error) {
    console.error('Error getting email settings:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—á—Ç—ã'
    });
  }
};

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã
 */
export const updateEmailSettings = async (req: Request, res: Response) => {
  try {
    const {
      host,
      port,
      secure,
      user,
      password,
      mangoEmail,
      checkInterval,
      enabled
    }: EmailSettings = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!host || !user || !mangoEmail) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ–ª—è host, user –∏ mangoEmail –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    if (port < 1 || port > 65535) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-65535'
      });
    }

    if (checkInterval < 1 || checkInterval > 1440) {
      return res.status(400).json({
        success: false,
        message: '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç'
      });
    }

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const existingSettings = await prisma.emailSettings.findFirst({
      orderBy: { createdAt: 'desc' }
    });

    let updatedSettings;

    if (existingSettings) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      updatedSettings = await prisma.emailSettings.update({
        where: { id: existingSettings.id },
        data: {
          host,
          port,
          secure,
          user,
          password: password === '***' ? existingSettings.password : password, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
          mangoEmail,
          checkInterval,
          enabled
        }
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      updatedSettings = await prisma.emailSettings.create({
        data: {
          host,
          port,
          secure,
          user,
          password,
          mangoEmail,
          checkInterval,
          enabled
        }
      });
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–µ—Ä–≤–∏—Å–µ
    const emailRecordingService = require('../services/emailRecordingService').default;
    await emailRecordingService.reloadConfig();

    // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ
    const responseData = {
      ...updatedSettings,
      password: '***'
    };
    
    res.json({
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      data: responseData
    });
  } catch (error) {
    console.error('Error updating email settings:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—á—Ç—ã'
    });
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ
 */
export const testEmailConnection = async (req: Request, res: Response) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    const settings = await prisma.emailSettings.findFirst({
      orderBy: { createdAt: 'desc' }
    });

    if (!settings) {
      return res.status(400).json({
        success: false,
        message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
      });
    }

    const config = {
      host: settings.host,
      port: settings.port,
      secure: settings.secure,
      user: settings.user,
      password: settings.password,
      connTimeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
      authTimeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
      keepalive: {
        interval: 10000,
        idleInterval: 300000,
        forceNoop: true
      },
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Timeweb
      tls: false,
      tlsOptions: { rejectUnauthorized: false }
    };

    console.log('üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ:', {
      host: config.host,
      port: config.port,
      secure: config.secure,
      user: config.user
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const imap = new Imap(config);
    
    const testResult = await new Promise<{ success: boolean; message: string }>((resolve) => {
      let resolved = false;

      const timeout = setTimeout(() => {
        if (!resolved) {
          resolved = true;
          imap.end();
          resolve({
            success: false,
            message: '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (60 —Å–µ–∫—É–Ω–¥)'
          });
        }
      }, 60000);

      imap.once('ready', () => {
        if (!resolved) {
          resolved = true;
          clearTimeout(timeout);
          imap.end();
          console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω');
          resolve({
            success: true,
            message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ —É—Å–ø–µ—à–Ω–æ'
          });
        }
      });

      imap.once('error', (err: Error) => {
        if (!resolved) {
          resolved = true;
          clearTimeout(timeout);
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', {
            message: err.message,
            source: (err as any).source,
            code: (err as any).code
          });
          resolve({
            success: false,
            message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`
          });
        }
      });

      imap.connect();
    });

    res.json({
      success: testResult.success,
      message: testResult.message
    });

  } catch (error) {
    console.error('Error testing email connection:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ'
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã
 */
export const getEmailMonitoringStats = async (req: Request, res: Response) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    const totalCalls = await prisma.call.count();
    const callsWithRecordings = await prisma.call.count({
      where: {
        recordingPath: {
          not: null
        }
      }
    });
    
    const recentProcessed = await prisma.call.count({
      where: {
        recordingProcessedAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        }
      }
    });

    const lastProcessed = await prisma.call.findFirst({
      where: {
        recordingProcessedAt: {
          not: null
        }
      },
      orderBy: {
        recordingProcessedAt: 'desc'
      },
      select: {
        recordingProcessedAt: true
      }
    });

    const stats = {
      totalCalls,
      callsWithRecordings,
      recentProcessed,
      successRate: totalCalls > 0 ? Math.round((callsWithRecordings / totalCalls) * 100) : 0,
      lastProcessed: lastProcessed?.recordingProcessedAt?.toISOString() || null,
      nextCheck: new Date(Date.now() + 5 * 60 * 1000).toISOString() // +5 –º–∏–Ω—É—Ç
    };

    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Error getting email monitoring stats:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'
    });
  }
};

/**
 * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
 */
export const triggerEmailCheck = async (req: Request, res: Response) => {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const emailRecordingService = require('../services/emailRecordingService').default;
    
    const result = await emailRecordingService.manualCheck();
    
    res.json({
      success: result.success,
      message: result.message,
      processedCount: result.processedCount
    });
  } catch (error) {
    console.error('Error triggering email check:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã'
    });
  }
};
