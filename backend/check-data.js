const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    const operators = await prisma.callcentreOperator.findMany();
    console.log(`üë• –û–ø–µ—Ä–∞—Ç–æ—Ä—ã: ${operators.length}`);
    if (operators.length > 0) {
      console.log('   –ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä:', operators[0].name, '(ID:', operators[0].id + ')');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–≤–æ–Ω–∫–∏
    const calls = await prisma.call.findMany();
    console.log(`üìû –ó–≤–æ–Ω–∫–∏: ${calls.length}`);
    if (calls.length > 0) {
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫:', calls[calls.length - 1].dateCreate);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
    const orders = await prisma.order.findMany();
    console.log(`üìã –ó–∞–∫–∞–∑—ã: ${orders.length}`);
    if (orders.length > 0) {
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑:', orders[orders.length - 1].createDate);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
    const phones = await prisma.phone.findMany();
    console.log(`üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ê–≤–∏—Ç–æ
    const avitoAccounts = await prisma.avito.findMany();
    console.log(`üè™ –ê–∫–∫–∞—É–Ω—Ç—ã –ê–≤–∏—Ç–æ: ${avitoAccounts.length}`);

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkData();
