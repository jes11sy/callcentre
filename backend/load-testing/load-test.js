const axios = require('axios');
const { performance } = require('perf_hooks');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  baseURL: 'http://localhost:5000/api',
  auth: {
    login: 'admin',
    password: 'admin123'
  },
  testScenarios: {
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    concurrentUsers: [1, 5, 10, 20, 50],
    // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    duration: 30,
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º—Å)
    requestDelay: 100
  }
};

class LoadTester {
  constructor() {
    this.results = {
      scenarios: [],
      summary: {
        totalRequests: 0,
        successfulRequests: 0,
        failedRequests: 0,
        averageResponseTime: 0,
        minResponseTime: Infinity,
        maxResponseTime: 0,
        requestsPerSecond: 0
      }
    };
    this.authToken = null;
  }

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  async authenticate() {
    try {
      const response = await axios.post(`${CONFIG.baseURL}/auth/login`, {
        login: CONFIG.auth.login,
        password: CONFIG.auth.password
      });
      
      this.authToken = response.data.accessToken;
      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
      return false;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
  createHttpClient() {
    return axios.create({
      baseURL: CONFIG.baseURL,
      headers: {
        'Authorization': `Bearer ${this.authToken}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
  }

  // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
  getTestScenarios() {
    return [
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤',
        method: 'GET',
        url: '/calls',
        params: { page: 1, limit: 20 }
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
        method: 'GET',
        url: '/orders',
        params: { page: 1, limit: 20 }
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
        method: 'GET',
        url: '/employees',
        params: { page: 1, limit: 20 }
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        method: 'GET',
        url: '/stats/my',
        params: { 
          startDate: '2025-01-01', 
          endDate: '2025-12-31' 
        }
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è',
        method: 'GET',
        url: '/auth/profile'
      }
    ];
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  async executeRequest(client, scenario) {
    const startTime = performance.now();
    
    try {
      let response;
      
      if (scenario.method === 'GET') {
        response = await client.get(scenario.url, { params: scenario.params });
      } else if (scenario.method === 'POST') {
        response = await client.post(scenario.url, scenario.data);
      }
      
      const endTime = performance.now();
      const responseTime = endTime - startTime;
      
      return {
        success: true,
        responseTime,
        statusCode: response.status,
        scenario: scenario.name
      };
    } catch (error) {
      const endTime = performance.now();
      const responseTime = endTime - startTime;
      
      return {
        success: false,
        responseTime,
        statusCode: error.response?.status || 0,
        error: error.message,
        scenario: scenario.name
      };
    }
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async simulateUser(userId, scenarios, duration) {
    const client = this.createHttpClient();
    const userResults = [];
    const startTime = Date.now();
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É`);
    
    while (Date.now() - startTime < duration * 1000) {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
      const scenario = scenarios[Math.floor(Math.random() * scenarios.length)];
      
      const result = await this.executeRequest(client, scenario);
      userResults.push(result);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, CONFIG.testScenarios.requestDelay));
    }
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (${userResults.length} –∑–∞–ø—Ä–æ—Å–æ–≤)`);
    return userResults;
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async runScenario(concurrentUsers) {
    console.log(`\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å ${concurrentUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...`);
    
    const scenarios = this.getTestScenarios();
    const duration = CONFIG.testScenarios.duration;
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userPromises = [];
    for (let i = 1; i <= concurrentUsers; i++) {
      userPromises.push(this.simulateUser(i, scenarios, duration));
    }
    
    const startTime = performance.now();
    const allResults = await Promise.all(userPromises);
    const endTime = performance.now();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const flatResults = allResults.flat();
    const successfulRequests = flatResults.filter(r => r.success);
    const failedRequests = flatResults.filter(r => !r.success);
    
    const responseTimes = flatResults.map(r => r.responseTime);
    const averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
    const minResponseTime = Math.min(...responseTimes);
    const maxResponseTime = Math.max(...responseTimes);
    
    const totalTime = (endTime - startTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const requestsPerSecond = flatResults.length / totalTime;
    
    const scenarioResult = {
      concurrentUsers,
      duration,
      totalRequests: flatResults.length,
      successfulRequests: successfulRequests.length,
      failedRequests: failedRequests.length,
      successRate: (successfulRequests.length / flatResults.length) * 100,
      averageResponseTime: Math.round(averageResponseTime),
      minResponseTime: Math.round(minResponseTime),
      maxResponseTime: Math.round(maxResponseTime),
      requestsPerSecond: Math.round(requestsPerSecond * 100) / 100,
      errors: failedRequests.map(r => r.error).filter((v, i, a) => a.indexOf(v) === i)
    };
    
    this.results.scenarios.push(scenarioResult);
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${concurrentUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${scenarioResult.totalRequests}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${scenarioResult.successfulRequests} (${scenarioResult.successRate.toFixed(1)}%)`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${scenarioResult.failedRequests}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${scenarioResult.averageResponseTime}–º—Å`);
    console.log(`   –ú–∏–Ω/–ú–∞–∫—Å –≤—Ä–µ–º—è: ${scenarioResult.minResponseTime}–º—Å / ${scenarioResult.maxResponseTime}–º—Å`);
    console.log(`   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${scenarioResult.requestsPerSecond}`);
    
    if (scenarioResult.errors.length > 0) {
      console.log(`   –û—à–∏–±–∫–∏: ${scenarioResult.errors.join(', ')}`);
    }
    
    return scenarioResult;
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log('üß™ –ù–∞—á–∞–ª–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const authSuccess = await this.authenticate();
    if (!authSuccess) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.');
      return;
    }
    
    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const concurrentUsers of CONFIG.testScenarios.concurrentUsers) {
      await this.runScenario(concurrentUsers);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      console.log('‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...\n');
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    this.generateSummary();
    this.generateReport();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏
  generateSummary() {
    const allResults = this.results.scenarios.flat();
    this.results.summary = {
      totalRequests: allResults.reduce((sum, r) => sum + r.totalRequests, 0),
      successfulRequests: allResults.reduce((sum, r) => sum + r.successfulRequests, 0),
      failedRequests: allResults.reduce((sum, r) => sum + r.failedRequests, 0),
      averageResponseTime: Math.round(
        allResults.reduce((sum, r) => sum + r.averageResponseTime, 0) / allResults.length
      ),
      minResponseTime: Math.min(...allResults.map(r => r.minResponseTime)),
      maxResponseTime: Math.max(...allResults.map(r => r.maxResponseTime)),
      requestsPerSecond: Math.round(
        allResults.reduce((sum, r) => sum + r.requestsPerSecond, 0) / allResults.length * 100
      ) / 100
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('='.repeat(60));
    
    console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.results.summary.totalRequests}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${this.results.summary.successfulRequests}`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${this.results.summary.failedRequests}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${this.results.summary.averageResponseTime}–º—Å`);
    console.log(`   –ú–∏–Ω/–ú–∞–∫—Å –≤—Ä–µ–º—è: ${this.results.summary.minResponseTime}–º—Å / ${this.results.summary.maxResponseTime}–º—Å`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ RPS: ${this.results.summary.requestsPerSecond}`);
    
    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º:`);
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ | –ó–∞–ø—Ä–æ—Å–æ–≤ | –£—Å–ø–µ—Ö% | –°—Ä.–≤—Ä–µ–º—è | RPS');
    console.log('-'.repeat(50));
    
    this.results.scenarios.forEach(scenario => {
      console.log(
        `${scenario.concurrentUsers.toString().padStart(10)} | ` +
        `${scenario.totalRequests.toString().padStart(8)} | ` +
        `${scenario.successRate.toFixed(1).padStart(6)}% | ` +
        `${scenario.averageResponseTime.toString().padStart(8)}–º—Å | ` +
        `${scenario.requestsPerSecond}`
      );
    });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
    
    const maxUsers = Math.max(...this.results.scenarios.map(s => s.concurrentUsers));
    const maxUsersScenario = this.results.scenarios.find(s => s.concurrentUsers === maxUsers);
    
    if (maxUsersScenario.successRate < 95) {
      console.log(`   ‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (${maxUsersScenario.successRate.toFixed(1)}%)`);
      console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É`);
    }
    
    if (maxUsersScenario.averageResponseTime > 1000) {
      console.log(`   ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (${maxUsersScenario.averageResponseTime}–º—Å)`);
      console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    }
    
    if (maxUsersScenario.requestsPerSecond < 10) {
      console.log(`   ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (${maxUsersScenario.requestsPerSecond} RPS)`);
      console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞`);
    }
    
    console.log(`\n‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new LoadTester();
  await tester.runAllTests();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = LoadTester;
