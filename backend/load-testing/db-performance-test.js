const { PrismaClient } = require('@prisma/client');
const { performance } = require('perf_hooks');

class DatabasePerformanceTester {
  constructor() {
    this.prisma = new PrismaClient();
    this.results = {
      queries: [],
      summary: {
        totalQueries: 0,
        averageTime: 0,
        slowestQuery: null,
        fastestQuery: null
      }
    };
  }

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  getTestQueries() {
    return [
      {
        name: '–ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤',
        query: () => this.prisma.call.count()
      },
      {
        name: '–ü–æ–¥—Å—á–µ—Ç –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É',
        query: () => this.prisma.call.count({
          where: { operatorId: 1 }
        })
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π',
        query: () => this.prisma.call.findMany({
          take: 20,
          skip: 0,
          orderBy: { dateCreate: 'desc' },
          include: {
            operator: {
              select: { id: true, name: true }
            }
          }
        })
      },
      {
        name: '–ü–æ–∏—Å–∫ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É',
        query: () => this.prisma.call.findMany({
          where: {
            city: {
              contains: '–ú–æ—Å–∫–≤–∞',
              mode: 'insensitive'
            }
          },
          take: 10
        })
      },
      {
        name: '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É',
        query: () => this.prisma.call.groupBy({
          by: ['status'],
          _count: { id: true }
        })
      },
      {
        name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞',
        query: () => this.prisma.call.groupBy({
          by: ['operatorId', 'status'],
          where: {
            dateCreate: {
              gte: new Date('2025-01-01'),
              lte: new Date('2025-12-31')
            }
          },
          _count: { id: true }
        })
      },
      {
        name: '–ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤',
        query: () => this.prisma.order.count()
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º',
        query: () => this.prisma.order.findMany({
          take: 20,
          include: {
            operator: {
              select: { id: true, name: true }
            }
          }
        })
      },
      {
        name: '–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É',
        query: () => this.prisma.order.findMany({
          where: {
            phone: {
              contains: '8'
            }
          },
          take: 10
        })
      },
      {
        name: '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É',
        query: () => this.prisma.order.groupBy({
          by: ['statusOrder'],
          _count: { id: true }
        })
      }
    ];
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  async executeQuery(testQuery, iterations = 5) {
    const times = [];
    
    for (let i = 0; i < iterations; i++) {
      const startTime = performance.now();
      
      try {
        await testQuery.query();
        const endTime = performance.now();
        const executionTime = endTime - startTime;
        times.push(executionTime);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ "${testQuery.name}":`, error.message);
        return {
          name: testQuery.name,
          success: false,
          error: error.message,
          averageTime: 0,
          minTime: 0,
          maxTime: 0
        };
      }
    }
    
    const averageTime = times.reduce((a, b) => a + b, 0) / times.length;
    const minTime = Math.min(...times);
    const maxTime = Math.max(...times);
    
    return {
      name: testQuery.name,
      success: true,
      averageTime: Math.round(averageTime * 100) / 100,
      minTime: Math.round(minTime * 100) / 100,
      maxTime: Math.round(maxTime * 100) / 100,
      iterations
    };
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
  async testIndexes() {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    const indexTests = [
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ operatorId (—Å –∏–Ω–¥–µ–∫—Å–æ–º)',
        query: () => this.prisma.call.findMany({
          where: { operatorId: 1 },
          take: 100
        })
      },
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ dateCreate (—Å –∏–Ω–¥–µ–∫—Å–æ–º)',
        query: () => this.prisma.call.findMany({
          where: {
            dateCreate: {
              gte: new Date('2025-01-01'),
              lte: new Date('2025-12-31')
            }
          },
          take: 100
        })
      },
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ city (—Å –∏–Ω–¥–µ–∫—Å–æ–º)',
        query: () => this.prisma.call.findMany({
          where: {
            city: {
              contains: '–ú–æ—Å–∫–≤–∞',
              mode: 'insensitive'
            }
          },
          take: 100
        })
      },
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ status (—Å –∏–Ω–¥–µ–∫—Å–æ–º)',
        query: () => this.prisma.call.findMany({
          where: { status: 'answered' },
          take: 100
        })
      }
    ];
    
    const indexResults = [];
    for (const test of indexTests) {
      const result = await this.executeQuery(test, 3);
      indexResults.push(result);
      console.log(`   ${result.name}: ${result.averageTime}–º—Å (–º–∏–Ω: ${result.minTime}–º—Å, –º–∞–∫—Å: ${result.maxTime}–º—Å)`);
    }
    
    return indexResults;
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  async testComplexQueries() {
    console.log('\nüßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
    
    const complexQueries = [
      {
        name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥',
        query: () => this.prisma.call.groupBy({
          by: ['operatorId'],
          where: {
            dateCreate: {
              gte: new Date('2025-01-01'),
              lte: new Date('2025-12-31')
            }
          },
          _count: { id: true },
          _avg: { id: true }
        })
      },
      {
        name: '–¢–æ–ø-5 –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –∑–≤–æ–Ω–∫–∞–º',
        query: () => this.prisma.call.groupBy({
          by: ['operatorId'],
          _count: { id: true },
          orderBy: { _count: { id: 'desc' } },
          take: 5
        })
      },
      {
        name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º',
        query: () => this.prisma.call.groupBy({
          by: ['city'],
          _count: { id: true },
          orderBy: { _count: { id: 'desc' } }
        })
      },
      {
        name: '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤ –≤ –¥–µ–Ω—å',
        query: () => this.prisma.call.groupBy({
          by: ['dateCreate'],
          _count: { id: true },
          orderBy: { dateCreate: 'desc' },
          take: 30
        })
      }
    ];
    
    const complexResults = [];
    for (const query of complexQueries) {
      const result = await this.executeQuery(query, 3);
      complexResults.push(result);
      console.log(`   ${result.name}: ${result.averageTime}–º—Å`);
    }
    
    return complexResults;
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å—Ç–∞–≤–∫–∏
  async testInsertPerformance() {
    console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å—Ç–∞–≤–∫–∏...');
    
    const insertTests = [];
    
    // –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    const singleInsertStart = performance.now();
    try {
      await this.prisma.call.create({
        data: {
          rk: 'TEST_RK',
          city: '–¢–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥',
          phoneClient: '+79999999999',
          phoneAts: '+79999999998',
          dateCreate: new Date(),
          operatorId: 1,
          status: 'test'
        }
      });
      const singleInsertEnd = performance.now();
      insertTests.push({
        name: '–í—Å—Ç–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞',
        time: Math.round((singleInsertEnd - singleInsertStart) * 100) / 100
      });
    } catch (error) {
      console.log(`   –í—Å—Ç–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞: –æ—à–∏–±–∫–∞ - ${error.message}`);
    }
    
    // –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const singleOrderStart = performance.now();
    try {
      await this.prisma.order.create({
        data: {
          rk: 'TEST_RK',
          city: '–¢–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥',
          phone: '+79999999999',
          typeOrder: 'first_time',
          clientName: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
          address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
          dateMeeting: new Date(),
          typeEquipment: 'kp',
          problem: '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
          statusOrder: 'new',
          operatorNameId: 1,
          createDate: new Date()
        }
      });
      const singleOrderEnd = performance.now();
      insertTests.push({
        name: '–í—Å—Ç–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞',
        time: Math.round((singleOrderEnd - singleOrderStart) * 100) / 100
      });
    } catch (error) {
      console.log(`   –í—Å—Ç–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: –æ—à–∏–±–∫–∞ - ${error.message}`);
    }
    
    insertTests.forEach(test => {
      console.log(`   ${test.name}: ${test.time}–º—Å`);
    });
    
    return insertTests;
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log('üóÑÔ∏è  –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    try {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
      const queries = this.getTestQueries();
      
      for (const query of queries) {
        const result = await this.executeQuery(query, 3);
        this.results.queries.push(result);
        
        if (result.success) {
          console.log(`   ‚úÖ ${result.name}: ${result.averageTime}–º—Å (–º–∏–Ω: ${result.minTime}–º—Å, –º–∞–∫—Å: ${result.maxTime}–º—Å)`);
        } else {
          console.log(`   ‚ùå ${result.name}: –æ—à–∏–±–∫–∞ - ${result.error}`);
        }
      }
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
      const indexResults = await this.testIndexes();
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const complexResults = await this.testComplexQueries();
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏
      const insertResults = await this.testInsertPerformance();
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      this.generateReport();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
      await this.prisma.$disconnect();
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    console.log('\nüìã –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('='.repeat(60));
    
    const successfulQueries = this.results.queries.filter(q => q.success);
    
    if (successfulQueries.length === 0) {
      console.log('‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    const averageTime = successfulQueries.reduce((sum, q) => sum + q.averageTime, 0) / successfulQueries.length;
    const slowestQuery = successfulQueries.reduce((slowest, q) => 
      q.averageTime > slowest.averageTime ? q : slowest
    );
    const fastestQuery = successfulQueries.reduce((fastest, q) => 
      q.averageTime < fastest.averageTime ? q : fastest
    );
    
    console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.results.queries.length}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulQueries.length}`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${this.results.queries.length - successfulQueries.length}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(averageTime * 100) / 100}–º—Å`);
    console.log(`   –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${slowestQuery.name} (${slowestQuery.averageTime}–º—Å)`);
    console.log(`   –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å: ${fastestQuery.name} (${fastestQuery.averageTime}–º—Å)`);
    
    console.log(`\nüìà –¢–æ–ø-5 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`);
    const slowestQueries = successfulQueries
      .sort((a, b) => b.averageTime - a.averageTime)
      .slice(0, 5);
    
    slowestQueries.forEach((query, index) => {
      console.log(`   ${index + 1}. ${query.name}: ${query.averageTime}–º—Å`);
    });
    
    console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
    
    if (averageTime > 100) {
      console.log(`   ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (${Math.round(averageTime)}–º—Å)`);
      console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã`);
    }
    
    if (slowestQuery.averageTime > 1000) {
      console.log(`   ‚ö†Ô∏è  –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${slowestQuery.name} (${slowestQuery.averageTime}–º—Å)`);
      console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è`);
    }
    
    const slowQueries = successfulQueries.filter(q => q.averageTime > 500);
    if (slowQueries.length > 0) {
      console.log(`   ‚ö†Ô∏è  ${slowQueries.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ 500–º—Å`);
      console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã`);
    }
    
    console.log(`\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new DatabasePerformanceTester();
  await tester.runAllTests();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = DatabasePerformanceTester;
